package infoli;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

class infoliKernel extends Kernel {

	//Arithmetic Types
	private static final DFEType typeInt64 = dfeUInt(64);
	private static final DFEType floatType = dfeFloat(8,24);
	private static final DFEType boolType = dfeBool();




	protected infoliKernel(KernelParameters parameters) {
		super(parameters);

		optimization.pushPipeliningFactor(0.8);// Push build to reduce resources
		///---kernel hardcoded parameters DO NOT TOUCH---///
		int StatePamaterers = 19;
		int NetMaxSize = 7680;
		int UnrollFactor = 16;  //Make sure this has the same value in the kernel code and manager (UnrollFactor)


		//Kernel parameter inputs
		DFEVar NetSize = io.scalarInput("N_size", typeInt64);
		DFEVar SimSteps = io.scalarInput("simsteps", typeInt64);
		DFEVar TimeMuxFactor = io.scalarInput("time_mux_factor", typeInt64);
		DFEVar MaxNSize = io.scalarInput("Max_N_Size", typeInt64);
		//Declaration of Vector types (stored state and ini state)
		final DFEVectorType<DFEVar> IniVectorType =
			new DFEVectorType<DFEVar>(floatType, 24);

		final DFEVectorType<DFEVar> StateVectorType =
			new DFEVectorType<DFEVar>(floatType, 19);



		//State handling vectors
		DFEVector<DFEVar> PrevCellState 	= StateVectorType.newInstance(this);
		DFEVector<DFEVar> NewCellState 	= StateVectorType.newInstance(this);
		DFEVector<DFEVar> TempCellState 	= StateVectorType.newInstance(this);


		//Offsets Length to write back in BRAM
		OffsetExpr writeLoop0 = stream.makeOffsetAutoLoop("writeLoop0");
		OffsetExpr writeLoop1 = stream.makeOffsetAutoLoop("writeLoop1");
		OffsetExpr writeLoop2 = stream.makeOffsetAutoLoop("writeLoop2");
		OffsetExpr writeLoop3 = stream.makeOffsetAutoLoop("writeLoop3");
		OffsetExpr writeLoop4 = stream.makeOffsetAutoLoop("writeLoop4");
		OffsetExpr writeLoop5 = stream.makeOffsetAutoLoop("writeLoop5");
		OffsetExpr writeLoop6 = stream.makeOffsetAutoLoop("writeLoop6");
		OffsetExpr writeLoop7 = stream.makeOffsetAutoLoop("writeLoop7");
		//OffsetExpr writeLoop8 = stream.makeOffsetAutoLoop("writeLoop8");
		OffsetExpr writeLoop9 = stream.makeOffsetAutoLoop("writeLoop9");
		OffsetExpr writeLoop10 = stream.makeOffsetAutoLoop("writeLoop10");
		OffsetExpr writeLoop11 = stream.makeOffsetAutoLoop("writeLoop11");
		OffsetExpr writeLoop12 = stream.makeOffsetAutoLoop("writeLoop12");
		OffsetExpr writeLoop13 = stream.makeOffsetAutoLoop("writeLoop13");
		OffsetExpr writeLoop14 = stream.makeOffsetAutoLoop("writeLoop14");
		OffsetExpr writeLoop15 = stream.makeOffsetAutoLoop("writeLoop15");
		OffsetExpr writeLoop16 = stream.makeOffsetAutoLoop("writeLoop16");
		OffsetExpr writeLoop17 = stream.makeOffsetAutoLoop("writeLoop17");
		OffsetExpr writeLoop18 = stream.makeOffsetAutoLoop("writeLoop18");

		//Offset Length for VDend BRAM MUX
		OffsetExpr VDLoop = stream.makeOffsetAutoLoop("VDLoop");
		//Offset for WrapPoint
		OffsetExpr GapJWrapLoop = stream.makeOffsetAutoLoop("GapJWrapLoop");

		//Offset for GP value accumulation
		OffsetExpr AccuVOff = stream.makeOffsetAutoLoop("AccuVOff");
		OffsetExpr AccuFOff = stream.makeOffsetAutoLoop("AccuFOff");



		//counters for execution iteration monitoring
		CounterChain chain 	= control.count.makeCounterChain();
		DFEVar StepNumber   = chain.addCounter(SimSteps+1, 1);
		DFEVar NeuronNumber = chain.addCounter(NetSize, 1);
		DFEVar GapJWrap =  NeuronNumber.eq(NetSize-1) ? NetSize/UnrollFactor + writeLoop0.getDFEVar(this, dfeUInt(64)) : NetSize/UnrollFactor;
		DFEVar GapJWrapOffset = stream.offset(GapJWrap, -GapJWrapLoop);
		DFEVar GapJunctionInterations = chain.addCounter(GapJWrapOffset, 1);



		//debug.simPrintf(GapJunctionInterations.eq(0),"\n Net Size [ %d]", NetSize);
		//debug.simPrintf(GapJunctionInterations.eq(0),"\n TotalSimSteps [ %d]", SimSteps);
		//debug.simPrintf(GapJunctionInterations.eq(0),"\n Time Mux [ %d]", TimeMuxFactor);
		//debug.simPrintf(GapJunctionInterations.eq(0),"\n MaxSize [ %d]", MaxNSize);

		debug.simPrintf(NeuronNumber.eq(0) & GapJunctionInterations.eq(0),"\n[SimStep = %d ]\n",StepNumber );
		//debug.simPrintf(GapJunctionInterations.eq(0),"\n[NeuronNumber = %d ]\n", NeuronNumber);
		//debug.simPrintf("[ %d]", GapJunctionInterations);

		//Input Streams
		DFEVector<DFEVar> IniVector = io.input("Ini", IniVectorType, (StepNumber === 0 & GapJunctionInterations === 0));
		DFEVar iAppInput = io.input("iApp", floatType, GapJunctionInterations === 0 & StepNumber!==SimSteps );
		DFEVar ICInput = io.input("IC", floatType, StepNumber === 0 & GapJunctionInterations === 0 );

		//BRAM0 storing dendrite parameters Extra cell used as neighbouring input source
		Memory<DFEVar> StateRamVDend0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamVDend1 = mem.alloc(floatType,NetMaxSize);

		Memory<DFEVar> StateRamCalR0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamPotassium0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamHCurr0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamCal2Plus0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamICaH0 = mem.alloc(floatType,NetMaxSize);
		//BRAM0 storing soma papameters
		Memory<DFEVar> StateRamGCal0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamVSoma0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamSodiumM0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamSodiumH0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamPotassiumN0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamPotassiumP0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamPotassiumXS0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamCalK0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamCalL0 = mem.alloc(floatType,NetMaxSize);
		//BRAM0 storing axon papameters
		Memory<DFEVar> StateRamVAxon0 = mem.alloc(floatType,NetMaxSize);
		//Memory<DFEVar> StateRamVAxon0 = mem.ramDualPort(NetMaxSize, RamWriteMode.READ_FIRST,
		//		mem.makeRamPortParams(RamPortMode.READ_ONLY, NeuronNumber, floatType),mem.makeRamPortParams(RamPortMode.WRITE_ONLY, NeuronNumber, floatType) ) //floatType,NetMaxSize);
		Memory<DFEVar> StateRamSodiumMA0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamSodiumHA0 = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> StateRamPotassiumXA0 = mem.alloc(floatType,NetMaxSize);

		//Brams to accumulate GP connectivity
		Memory<DFEVar> AccuV = mem.alloc(floatType,NetMaxSize);
		Memory<DFEVar> AccuF = mem.alloc(floatType,NetMaxSize);





		//Bram address controlled by neuron number
		DFEVar address = NeuronNumber;
		//Choice signals for VDend BRAMs write and read choice
		DFEVar ReadChoiceEnable = boolType.newInstance(this);
		DFEVar ReadChoiceEnableOffset = stream.offset(ReadChoiceEnable, -VDLoop);
		ReadChoiceEnable <== NeuronNumber.eq(0)&GapJunctionInterations.eq(0) ? ~ReadChoiceEnableOffset : ReadChoiceEnableOffset;
		DFEVar WriteChoiceOffset =  stream.offset(ReadChoiceEnable, -writeLoop0);

		//Read Appropriate previous state from BRAMs for computation

		TempCellState[0] <== ReadChoiceEnable.eq(true) ? StateRamVDend0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize)))) : StateRamVDend1.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize)))) ;
		TempCellState[1] <==  StateRamCalR0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[2] <==  StateRamPotassium0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[3] <==  StateRamHCurr0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize)))) ;
		TempCellState[4] <==  StateRamCal2Plus0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize)))) ;
		TempCellState[5] <==  StateRamICaH0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));

		TempCellState[6] <== StateRamGCal0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[7] <== StateRamVSoma0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[8] <== StateRamSodiumM0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[9] <== StateRamSodiumH0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[10] <== StateRamPotassiumN0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[11] <== StateRamPotassiumP0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[12] <== StateRamPotassiumXS0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[13] <== StateRamCalK0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[14] <== StateRamCalL0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));

		//TempCellState[15] <== StateRamVAxon0.port(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), NewCellState[15], constant.var(false), RamWriteMode.READ_FIRST);
		TempCellState[15] <== StateRamVAxon0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[16] <== StateRamSodiumMA0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[17] <== StateRamSodiumHA0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));
		TempCellState[18] <== StateRamPotassiumXA0.read(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))));

		//debug.simPrintf(GapJunctionInterations.eq(0)&StepNumber.neq(0) /*& NeuronNumber.eq(0)*/,"\n[ Temp = %.8f] ", TempCellState[0]  );


		//Save correct state on prev vector to perform the computations
		for(int z=0; z< StatePamaterers; z++){
			PrevCellState[z] <== StepNumber.eq(0) ? IniVector[z] : TempCellState[z];
			//debug.simPrintf(GapJunctionInterations.eq(0)&StepNumber.neq(0) /*& NeuronNumber.eq(0)*/,"\n[ prev = %.8f] ", PrevCellState[z]  );

			//System.out.printf("Prev Cell State z is %d \n", z);

		}


		//debug.simPrintf(GapJunctionInterations.eq(0)/*&StepNumber.eq(0) & NeuronNumber.eq(0)*/,"\n[ prev = %.8f] ", PrevCellState[0]  );



		//==========================COMPUTATION================================================//

		// Cell properties
		DFEVar DELTA = constant.var(floatType, 0.05);

		//Gap Junction Conductance
		DFEVar CONDUCTANCE		= constant.var(floatType, .004);

		// Capacitance
		DFEVar C_M = constant.var(floatType, 1);

		// Somatic conductances (mS/cm2)
		DFEVar G_NA_S = constant.var(floatType, 150);     // Na gate conductance (=90 in Schweighofer code, 70 in paper) 120 too little
		DFEVar G_KDR_S = constant.var(floatType, 9.0);   // K delayed rectifier gate conductance (alternative value: 18)
		DFEVar G_K_S = constant.var(floatType, 5);     // Voltage-dependent (fast) potassium
		DFEVar G_LS = constant.var(floatType, 0.016);// Leak conductance (0.015)

		// Dendritic conductances (mS/cm2)
		DFEVar G_K_CA = constant.var(floatType, 35);       // Potassium gate conductance (35)
		DFEVar G_CAH = constant.var(floatType, 4.5);     // High-threshold Ca gate conductance (4.5)
		DFEVar G_LD = constant.var(floatType, 0.016);   // Dendrite leak conductance (0.015)
		DFEVar G_H = constant.var(floatType, 0.125);    // H current gate conductance (1.5) (0.15 in SCHWEIGHOFER 2004)

		// Axon hillock conductances (mS/cm2)
		DFEVar G_NA_A = constant.var(floatType, 240);      // Na gate conductance (according to literature: 100 to 200 times as big as somatic conductance)
		//DFEVar G_NA_R = constant.var(floatType, 0);      // Na (resurgent) gate conductance
		DFEVar G_K_A = constant.var(floatType, 20);      // K voltage-dependent
		DFEVar G_LA = constant.var(floatType, 0.016);  // Leak conductance

		// Cell morphology
		DFEVar P1 = constant.var(floatType, 0.25);        // Cell surface ratio soma/dendrite (0.2)
		DFEVar P2 = constant.var(floatType, 0.15);      // Cell surface ratio axon(hillock)/soma (0.1)
		DFEVar G_INT = constant.var(floatType, 0.13);       // Cell internal conductance (0.13)

		// Reversal potentials
		DFEVar V_NA = constant.var(floatType, 55);       // Na reversal potential (55)
		DFEVar V_K = constant.var(floatType, -75);       // K reversal potential
		DFEVar V_CA = constant.var(floatType, 120);       // Ca reversal potential (120)
		DFEVar V_H = constant.var(floatType, -43);       // H current reversal potential
		DFEVar V_L = constant.var(floatType, 10);       // leak current



		//======================== IC (Gap Junction) VARIABLES====================================//



		DFEVar f 				= floatType.newInstance(this);
		DFEVar FaccComp 		= constant.var(floatType, 0);
		DFEVar VaccComp 		= constant.var(floatType, 0);
		DFEVar FaccCompAcc 		= floatType.newInstance(this);
		DFEVar VaccCompAcc 		= floatType.newInstance(this);
		DFEVar FaccCompAccOld 		= floatType.newInstance(this);
		DFEVar VaccCompAccOld 		= floatType.newInstance(this);


		DFEVar V 				= floatType.newInstance(this);
		DFEVar IC		 		= constant.var(floatType, 0);

		DFEVar [] Facc 			= new DFEVar[UnrollFactor];
		DFEVar [] Vacc 			= new DFEVar[UnrollFactor];


		//========================IC Gap Junction Computation==================================//
		// SCHWEIGHOFER 2004 VERSION




		for(int i=0 ; i < UnrollFactor; i++){


			//Read neighbouring inputs from correct BRAMs
			DFEVar ICAddress = GapJunctionInterations<NetSize/UnrollFactor ? GapJunctionInterations*UnrollFactor + i : NeuronNumber ;

			DFEVar neighVdend =  ReadChoiceEnable.eq(true) ? StateRamVDend0.read(ICAddress.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize)))) : StateRamVDend1.read(ICAddress.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize)))) ;
			DFEVar neighVdend_act = StepNumber.eq(0) ? IniVector[0] : neighVdend;
			V = PrevCellState[0] - neighVdend_act;

			//debug.simPrintf(GapJunctionInterations<NetSize/UnrollFactor/*&StepNumber.eq(0) & NeuronNumber.eq(0)*/,"\n[address = %d ] VDend = %.8f\n",ICAddress,neighVdend_act  );


			f = V * KernelMath.exp(-0.01 * V * V);
			Facc[i] = f;
			Vacc[i] = V;
			//debug.simPrintf(GapJunctionInterations<NetSize/UnrollFactor/*&StepNumber.eq(0) & NeuronNumber.eq(0)*/,"\n[ Own = %.8f, Neigh = %.8f] ", Own_act,neighVdend_act  );

			FaccComp += Facc[i];
			VaccComp += Vacc[i];

		}


		VaccCompAccOld = GapJunctionInterations.eq(0)  ? constant.var(floatType, 0) : AccuV.read(stream.offset(NeuronNumber.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), -AccuVOff));

		VaccCompAcc = VaccCompAccOld + VaccComp ;


		AccuV.write(stream.offset(NeuronNumber.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), -AccuVOff),
				stream.offset(VaccCompAcc, -AccuVOff),
				stream.offset(GapJunctionInterations<NetSize/UnrollFactor, -AccuVOff));

		FaccCompAccOld = GapJunctionInterations.eq(0)  ? constant.var(floatType, 0) : AccuF.read(stream.offset(NeuronNumber.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), -AccuFOff));

		FaccCompAcc = FaccCompAccOld + FaccComp ;

		AccuF.write(stream.offset(NeuronNumber.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), -AccuFOff),
				stream.offset(FaccCompAcc, -AccuFOff),
				stream.offset(GapJunctionInterations<NetSize/UnrollFactor, -AccuFOff));

		FaccCompAcc.simWatch("FaccCompAcc");
		VaccCompAcc.simWatch("VaccCompAcc");
		//NeuronNumber.simWatch("NeuronNumber");

		IC = StepNumber.eq(0) ? ICInput : CONDUCTANCE * (8 * FaccCompAcc + 2 * VaccCompAcc);
		//IC.simWatch("IC");
		//debug.simPrintf(/*GapJunctionInterations<NetSize/UnrollFactor&*/StepNumber.eq(0) & NeuronNumber.eq(0),"\n[IC = %.8f, FaccComp = %.8f , VaccComp = %.8f] ",IC, FaccComp, VaccComp  );
		//debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1) & StepNumber.eq(0) /*& NeuronNumber.eq(0)*/,"\n[IC = %.8f",IC );


		// ************************ DENDRITE CACULATIONS**************************//

		//************************************DendHCurr
		// Update dendritic  H current component
		DFEVar q_inf , tau_qInv , dq_dt;
		q_inf = 1 /(1 + KernelMath.exp((PrevCellState[0] + 80) / 4));
		//tau_q = 1 /(KernelMath.exp(-0.086 * PrevCellState[0] - 14.6) + KernelMath.exp(0.070 * PrevCellState[0] - 1.87));
		tau_qInv = (KernelMath.exp(-0.086 * PrevCellState[0] - 14.6) + KernelMath.exp(0.070 * PrevCellState[0] - 1.87));
		dq_dt = (q_inf - PrevCellState[3]) *  tau_qInv;
	    NewCellState[3] <== DELTA * dq_dt + PrevCellState[3];
	    DFEVar newThreeOffset =  stream.offset(NewCellState[3], -writeLoop3);
	    DFEVar addressThreeOffset =  stream.offset(address, -writeLoop3);
	    DFEVar EnableThreeOffset =  stream.offset(GapJunctionInterations, -writeLoop3);
	    //debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<2& NeuronNumber>91,"Prev H_Curr %.8f %.8f\n ",PrevCellState[3], PrevCellState[0] );

	    //Update dendritic Ca current component**** DendCaCurr

	    DFEVar alpha_r, beta_r, r_inf, tau_r, dr_dt;
	    alpha_r = 1.7 / (1 + KernelMath.exp( (-PrevCellState[0] + 5) / 13.9));
	    beta_r = 0.02 * (PrevCellState[0] + 8.5) / (KernelMath.exp((PrevCellState[0] + 8.5) / 5) - 1);
	    DFEVar tempSum = alpha_r + beta_r;
	    r_inf = alpha_r / tempSum;
	    tau_r = 5 / tempSum;
	    dr_dt = (r_inf - PrevCellState[1]) / tau_r;
	    NewCellState[1] <== DELTA * dr_dt + PrevCellState[1];
	    DFEVar newOneOffset =  stream.offset(NewCellState[1], -writeLoop1);
	    DFEVar addressOneOffset =  stream.offset(address, -writeLoop1);
	    DFEVar EnableOneOffset =  stream.offset(GapJunctionInterations, -writeLoop1);

	    //Update dendritic K current component *************DendKCurr

	    DFEVar  alpha_s, s_inf, tau_sInv, ds_dt;
	    DFEVar beta_s = constant.var(floatType, 0.015);

	    alpha_s = KernelMath.min((0.00002*PrevCellState[4]), constant.var(0.01));
	    DFEVar tempSum1 = alpha_s + beta_s;
	    s_inf = alpha_s / tempSum1;
	    //tau_s = 1 / (alpha_s + beta_s);
	    tau_sInv =  tempSum1;
	    ds_dt = (s_inf - PrevCellState[2]) * tau_sInv;
	    NewCellState[2] <== DELTA * ds_dt + PrevCellState[2];
	    DFEVar newTwoOffset =  stream.offset(NewCellState[2], -writeLoop2);
	    DFEVar addressTwoOffset =  stream.offset(address, -writeLoop2);
	    DFEVar EnableTwoOffset =  stream.offset(GapJunctionInterations, -writeLoop2);
	    //update Calcium concentration***** DendCal

	    DFEVar  dCa_dt;
	    dCa_dt = -3 * PrevCellState[5] - 0.075 * PrevCellState[4];
	    NewCellState[4] <== DELTA * dCa_dt + PrevCellState[4];
	    DFEVar newFourOffset =  stream.offset(NewCellState[4], -writeLoop4);
	    DFEVar addressFourOffset =  stream.offset(address, -writeLoop4);
	    DFEVar EnableFourOffset =  stream.offset(GapJunctionInterations, -writeLoop4);



	    //DENDRITIC CURRENTS***************DendCurrVolt

	    DFEVar I_sd, I_CaH, I_K_Ca, I_ld, I_h, dVd_dt;
	    // Soma-dendrite interaction current I_sd
	    I_sd   = (G_INT / (1 - P1)) * (PrevCellState[0] - PrevCellState[7]);//(PrevCellState[0] - PrevCellState[7])
	    // Inward high-threshold Ca current I_CaH
	    I_CaH  =  G_CAH * NewCellState[1] * NewCellState[1] * (PrevCellState[0] - V_CA);
	    // Outward Ca-dependent K current I_K_Ca
	    I_K_Ca =  G_K_CA * NewCellState[2] * (PrevCellState[0] - V_K);
	    // Leakage current I_ld
	    I_ld   =  G_LD * (PrevCellState[0] - V_L);
	    // Inward anomalous rectifier I_h
	    I_h    =  G_H * NewCellState[3] * (PrevCellState[0] - V_H);


	    dVd_dt = (-I_CaH   - I_sd  - I_ld - I_K_Ca - IC - I_h + iAppInput) / C_M;// + I_K_Ca + iC +
	    //debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<2& NeuronNumber.eq(0),"dVD_dt: %.8f %.8f %.8f %.8f %.8f %.8f ",I_CaH   , I_sd  , I_ld , I_K_Ca , IC , I_h );

	    //Put result (update V_dend)
	    NewCellState[0] <== DELTA * dVd_dt + PrevCellState[0];
	    DFEVar newZeroffset =  stream.offset(NewCellState[0], -writeLoop0);
	    DFEVar addressZeroOffset =  stream.offset(address, -writeLoop0);
	    DFEVar EnableZeroOffset =  stream.offset(GapJunctionInterations, -writeLoop0);
	    NewCellState[5] <== I_CaH;//This is a state value read in DendCal
	    DFEVar newFiveOffset =  stream.offset(NewCellState[5], -writeLoop5);
	    DFEVar addressFiveOffset =  stream.offset(address, -writeLoop5);
	    DFEVar EnableFiveOffset =  stream.offset(GapJunctionInterations, -writeLoop5);


	    //************************ SOMA CACULATIONS**************************
	    //*****************SomaCalcium
	    DFEVar k_inf, l_inf, tau_l, dk_dt, dl_dt;

	    k_inf = (1 / (1 + KernelMath.exp(-1 * (PrevCellState[7] + 61)   / 4.2)));
	    l_inf = (1 / (1 + KernelMath.exp(( PrevCellState[7] + 85.5) / 8.5)));
	    DFEVar tau_k = constant.var(floatType, 1);
	    tau_l = ((20 * KernelMath.exp((PrevCellState[7] + 160) / 30) / (1 + KernelMath.exp((PrevCellState[7] + 84) / 7.3))) +35);
	    dk_dt = (k_inf - PrevCellState[13]) / tau_k;
	    dl_dt = (l_inf - PrevCellState[14]) / tau_l;
	    NewCellState[13] <== DELTA * dk_dt + PrevCellState[13];
	    DFEVar newThirteenOffset =  stream.offset(NewCellState[13], -writeLoop13);
	    DFEVar addressThirteenOffset =  stream.offset(address, -writeLoop13);
	    DFEVar EnableThirteenOffset =  stream.offset(GapJunctionInterations, -writeLoop13);
	    NewCellState[14] <== DELTA * dl_dt + PrevCellState[14];
	    DFEVar newFourteenOffset =  stream.offset(NewCellState[14], -writeLoop14);
	    DFEVar addressFourteenOffset =  stream.offset(address, -writeLoop14);
	    DFEVar EnablFourteenOffset =  stream.offset(GapJunctionInterations, -writeLoop14);


	  	// RAT THALAMOCORTICAL SODIUM: *************SomaSodium

	    DFEVar   h_inf, tau_h, dh_dt; //m_inf,

	    NewCellState[8]  <== 1 / (1 + (KernelMath.exp((-30 - PrevCellState[7])/ 5.5)));
	    h_inf   = 1 / (1 + (KernelMath.exp((-70 - PrevCellState[7])/-5.8)));
	    tau_h   =       3 * KernelMath.exp((-40 - PrevCellState[7])/33);
	    dh_dt   = (h_inf - PrevCellState[9])/tau_h;
	    //NewCellState[8]  <== m_inf;
	    NewCellState[9] <== PrevCellState[9] + DELTA * dh_dt;
	    DFEVar newNineOffset =  stream.offset(NewCellState[9], -writeLoop9);
	    DFEVar addressNineOffset =  stream.offset(address, -writeLoop9);
	    DFEVar EnableNineOffset =  stream.offset(GapJunctionInterations, -writeLoop9);

	    //NEOCORTICAL *********************SomaPotassium

	    DFEVar n_inf, p_inf, tau_n, tau_p, dn_dt, dp_dt;

	    n_inf = 1 / (1 + KernelMath.exp( ( -3 - PrevCellState[7]) /  10));
	    p_inf = 1 / (1 + KernelMath.exp( (-51 - PrevCellState[7]) / -12));
	    tau_n =   5 + (  47 * KernelMath.exp( (50 + PrevCellState[7]) /  900));
	    tau_p = tau_n;
	    dn_dt = (n_inf - PrevCellState[10]) / tau_n;
	    dp_dt = (p_inf - PrevCellState[11]) / tau_p;
	    NewCellState[10] <== DELTA * dn_dt + PrevCellState[10];
	    NewCellState[11] <== DELTA * dp_dt + PrevCellState[11];
	    DFEVar newTenOffset =  stream.offset(NewCellState[10], -writeLoop10);
	    DFEVar addressTenOffset =  stream.offset(address, -writeLoop10);
	    DFEVar EnableTenOffset =  stream.offset(GapJunctionInterations, -writeLoop10);
	    DFEVar newElevenOffset =  stream.offset(NewCellState[11], -writeLoop11);
	    DFEVar addressElevenOffset =  stream.offset(address, -writeLoop11);
	    DFEVar EnableElevenOffset =  stream.offset(GapJunctionInterations, -writeLoop11);
	    //Voltage-dependent (fast) potassium************SomaPotassiumX

	    DFEVar alpha_x_s, beta_x_s, x_inf_s, tau_x_sInv, dx_dt_s;

	    alpha_x_s = 0.13 * (PrevCellState[7] + 25) / (1 - KernelMath.exp(-(PrevCellState[7] + 25) / 10));
	    beta_x_s  = 1.69 * KernelMath.exp(-0.0125 * (PrevCellState[7] + 35));
	    DFEVar tempSum2 = alpha_x_s + beta_x_s;
	    x_inf_s   = alpha_x_s / tempSum2;
	    //tau_x_s   =         1 / (alpha_x_s + beta_x_s);
	    tau_x_sInv   = tempSum2;
	    dx_dt_s   = (x_inf_s - PrevCellState[12]) * tau_x_sInv;
	    NewCellState[12] <== 0.05 * dx_dt_s + PrevCellState[12];
	    DFEVar newTwelveOffset =  stream.offset(NewCellState[12], -writeLoop12);
	    DFEVar addressTwelveOffset =  stream.offset(address, -writeLoop12);
	    DFEVar EnableTwelveOffset =  stream.offset(GapJunctionInterations, -writeLoop12);

	    //SOMATIC CURRENTS ********SomaCurrVolt

	    DFEVar I_ds, I_CaL, I_Na_s, I_ls, I_Kdr_s, I_K_s, I_as, dVs_dt;

	    // Dendrite-soma interaction current I_ds
	    I_ds  = (G_INT / P1) * (PrevCellState[7] - PrevCellState[0]);
	    // Inward low-threshold Ca current I_CaL
	    I_CaL = PrevCellState[6] * NewCellState[13] * NewCellState[13] * NewCellState[13] * NewCellState[14] * (PrevCellState[7] - V_CA); //k^3
	    // Inward Na current I_Na_s
	    I_Na_s  = G_NA_S * NewCellState[8] * NewCellState[8] * NewCellState[8] * NewCellState[9] * (PrevCellState[7] - V_NA);
	    // Leakage current I_ls
	    I_ls  = G_LS * (PrevCellState[7] - V_L);
	    // Outward delayed potassium current I_Kdr
	    I_Kdr_s = G_KDR_S * NewCellState[10] * NewCellState[10] * NewCellState[10] * NewCellState[10] * (PrevCellState[7] - V_K); // SCHWEIGHOFER
	    // I_K_s
	    I_K_s   = G_K_S * NewCellState[12] * NewCellState[12] * NewCellState[12] * NewCellState[12] * (PrevCellState[7] - V_K);
	    // Axon-soma interaction current I_as
	    I_as    = (G_INT / (1 - P2)) * (PrevCellState[7] - PrevCellState[15]);

	    dVs_dt = (-I_CaL   - I_ds  - I_as - I_Na_s - I_ls   -I_Kdr_s - I_K_s) / C_M;

	    NewCellState[7] <== DELTA * dVs_dt + PrevCellState[7];
	    DFEVar newSevenOffset =  stream.offset(NewCellState[7], -writeLoop7);
	    DFEVar addressSevenOffset =  stream.offset(address, -writeLoop7);
	    DFEVar EnableSevenOffset =  stream.offset(GapJunctionInterations, -writeLoop7);

	    //Update axonal Na components/ NOTE: current has shortened inactivation to account for high/ firing frequencies in axon hillock
	    //*************** AxonSodium
	    DFEVar m_inf_a, h_inf_a, tau_h_a, dh_dt_a;

	    m_inf_a   = 1 / (1 + (KernelMath.exp((-30 - PrevCellState[15])/ 5.5)));
	    h_inf_a   = 1 / (1 + (KernelMath.exp((-60 - PrevCellState[15])/-5.8)));
	    tau_h_a   =     1.5 * KernelMath.exp((-40 - PrevCellState[15])/33);
	    dh_dt_a   = (h_inf_a - PrevCellState[17])/tau_h_a;
	    NewCellState[16] <== m_inf_a;
	    DFEVar newSixteenOffset =  stream.offset(NewCellState[16], -writeLoop16);
	    DFEVar addressSixteenOffset =  stream.offset(address, -writeLoop16);
	    DFEVar EnableSixteenOffset =  stream.offset(GapJunctionInterations, -writeLoop16);

	    NewCellState[17] <== PrevCellState[17] + DELTA * dh_dt_a;
	    DFEVar newSeventeenOffset =  stream.offset(NewCellState[17], -writeLoop17);
	    DFEVar addressSeventeenOffset =  stream.offset(address, -writeLoop17);
	    DFEVar EnableSeventeenOffset =  stream.offset(GapJunctionInterations, -writeLoop17);
	    //Put result

	    //D'ANGELO 2001 -- Voltage-dependent potassium**************AxonPotassium

	    DFEVar alpha_x_a, beta_x_a, x_inf_a, tau_x_aInv, dx_dt_a;

	    alpha_x_a = 0.13 * (PrevCellState[15] + 25) / (1 - KernelMath.exp((-PrevCellState[15] - 25) / 10));
	    beta_x_a  = 1.69 * KernelMath.exp(-0.0125 * (PrevCellState[15] + 35));
	    DFEVar tempSum3 = alpha_x_a + beta_x_a;
	    x_inf_a   = alpha_x_a / tempSum3;
	    //tau_x_a   =         1 / (alpha_x_a + beta_x_a);
	    tau_x_aInv   = tempSum3;
	    dx_dt_a   = (x_inf_a - PrevCellState[18]) * tau_x_aInv;
	    NewCellState[18] <== 0.05 * dx_dt_a + PrevCellState[18];
	    DFEVar newEighteenOffset =  stream.offset(NewCellState[18], -writeLoop18);
	    DFEVar addressEighteenOffset =  stream.offset(address, -writeLoop18);
	    DFEVar EnableEighteenOffset =  stream.offset(GapJunctionInterations, -writeLoop18);

	    //Put result

	  	//AXONAL CURRENTS
	    DFEVar I_Na_a, I_la, I_sa, I_K_a, dVa_dt;

	    // Sodium
	    I_Na_a  = G_NA_A  * NewCellState[16] * NewCellState[16] * NewCellState[16] * NewCellState[17] * (PrevCellState[15] - V_NA);
	    // Leak
	    I_la    = G_LA    * (PrevCellState[15] - V_L);
	    // Soma-axon interaction current I_sa
	    I_sa    = (G_INT / P2) * (PrevCellState[15] - PrevCellState[7]);
	    // Potassium (transient)
	    I_K_a   = G_K_A * NewCellState[18] * NewCellState[18] * NewCellState[18] * NewCellState[18] * (PrevCellState[15] - V_K);
	    //debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<3& NeuronNumber>91," %.8f %.8f %.8f %.8f \n ",G_K_A , NewCellState[18] , PrevCellState[15] , V_K);

	    dVa_dt = (-I_K_a - I_sa - I_la - I_Na_a) / C_M;
	    NewCellState[15] <==  DELTA  * dVa_dt + PrevCellState[15];
	    //NewCellState[15] <==  DELTA  + PrevCellState[15];
	    //debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<3& NeuronNumber>91," %.8f %.8f \n ",PrevCellState[15], dVa_dt);
	    //debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<3& NeuronNumber>91," %.8f %.8f %.8f %.8f \n ",I_K_a , I_sa , I_la , I_Na_a);

	    DFEVar newOutOffset = stream.offset(NewCellState[15], -writeLoop15);
	    DFEVar addressFifteenOffset =  stream.offset(address, -writeLoop15);
	    DFEVar EnableFifteenOffset =  stream.offset(GapJunctionInterations, -writeLoop15);




	  //=============================================UN CONNECTED ELEMENTS=====================//
	    NewCellState[6] <== PrevCellState[6];
	    DFEVar newSixOffset = stream.offset(NewCellState[6], -writeLoop6);
	    DFEVar addressSixOffset =  stream.offset(address, -writeLoop6);
	    DFEVar EnableSixOffset =  stream.offset(GapJunctionInterations, -writeLoop6);


		//Write Appropriate new state from BRAMs for computation

		//Store New Dendrite state
		StateRamVDend0.write(addressZeroOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newZeroffset, EnableZeroOffset.eq(NetSize/UnrollFactor-1)&WriteChoiceOffset.eq(false));
		StateRamVDend1.write(addressZeroOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newZeroffset, EnableZeroOffset.eq(NetSize/UnrollFactor-1)&WriteChoiceOffset.eq(true));

		StateRamCalR0.write(addressOneOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newOneOffset, EnableOneOffset.eq(NetSize/UnrollFactor-1));
		StateRamPotassium0.write(addressTwoOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newTwoOffset, EnableTwoOffset.eq(NetSize/UnrollFactor-1));
		StateRamHCurr0.write(addressThreeOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newThreeOffset, EnableThreeOffset.eq(NetSize/UnrollFactor-1));
		StateRamCal2Plus0.write(addressFourOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newFourOffset, EnableFourOffset.eq(NetSize/UnrollFactor-1));
		StateRamICaH0.write(addressFiveOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newFiveOffset, EnableFiveOffset.eq(NetSize/UnrollFactor-1));

		//Store New Soma Calculations
		StateRamGCal0.write(addressSixOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newSixOffset, EnableSixOffset.eq(NetSize/UnrollFactor-1));
		StateRamVSoma0.write(addressSevenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newSevenOffset, EnableSevenOffset.eq(NetSize/UnrollFactor-1));
		StateRamSodiumM0.write(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), NewCellState[8], GapJunctionInterations.eq(NetSize/UnrollFactor-1));
		StateRamSodiumH0.write(addressNineOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))),newNineOffset, EnableNineOffset.eq(NetSize/UnrollFactor-1));
		StateRamPotassiumN0.write(addressTenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newTenOffset, EnableTenOffset.eq(NetSize/UnrollFactor-1));
		StateRamPotassiumP0.write(addressElevenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newElevenOffset, EnableElevenOffset.eq(NetSize/UnrollFactor-1));
		StateRamPotassiumXS0.write(addressTwelveOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newTwelveOffset, EnableTwelveOffset.eq(NetSize/UnrollFactor-1));
		StateRamCalK0.write(addressThirteenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newThirteenOffset, EnableThirteenOffset.eq(NetSize/UnrollFactor-1));
		StateRamCalL0.write(addressFourteenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newFourteenOffset, EnablFourteenOffset.eq(NetSize/UnrollFactor-1));

		//Store new Axon state
		//StateRamVAxon0.port(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), NewCellState[15], constant.var(true), RamWriteMode.READ_FIRST);
		//DFEVar Out = StateRamVAxon0.port(address.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newOutOffset, GapJunctionInterations.eq(NetSize/UnrollFactor-1)& WriteDelay.eq(loopLengthVal-1), RamWriteMode.WRITE_FIRST);
		StateRamVAxon0.write(addressFifteenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newOutOffset, EnableFifteenOffset.eq(NetSize/UnrollFactor-1));
		StateRamSodiumMA0.write(addressSixteenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newSixteenOffset, EnableSixteenOffset.eq(NetSize/UnrollFactor-1));

		StateRamSodiumHA0.write(addressSeventeenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))), newSeventeenOffset, EnableSeventeenOffset.eq(NetSize/UnrollFactor-1));
		StateRamPotassiumXA0.write(addressEighteenOffset.cast(dfeUInt(MathUtils.bitsToAddress(NetMaxSize))),newEighteenOffset, EnableEighteenOffset.eq(NetSize/UnrollFactor-1));

		//debug.simPrintf("\n[address = %d ]\n",addressFifteenOffset );
		//debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<20/*& NeuronNumber.eq(0)*/,"\n[Dend= %.8f, Soma= %.8f Axon = %.8f ]\n",NewCellState[0],NewCellState[7], NewCellState[15] );
		//debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<2& NeuronNumber>91,"%.8f %.8f %.8f %.8f %.8f %.8f\n ",NewCellState[0],NewCellState[3], NewCellState[1],NewCellState[2],NewCellState[5], NewCellState[4] );
		//debug.simPrintf(GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber<3& NeuronNumber>91,"Axon Values: %.8f %.8f %.8f %.8f \n ",NewCellState[15],NewCellState[16], NewCellState[17],NewCellState[18]);

		io.output("s",  NewCellState[15], floatType,GapJunctionInterations.eq(NetSize/UnrollFactor-1)&StepNumber!==SimSteps);
	}

}
